package com.jyj.video.jyjplayer.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import com.jyj.video.jyjplayer.db.bean.DownFilm;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DOWN_FILM".
*/
public class DownFilmDao extends AbstractDao<DownFilm, String> {

    public static final String TABLENAME = "DOWN_FILM";

    /**
     * Properties of entity DownFilm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property FileType = new Property(2, String.class, "fileType", false, "FILE_TYPE");
        public final static Property DisplayName = new Property(3, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property TotalLength = new Property(4, long.class, "totalLength", false, "TOTAL_LENGTH");
        public final static Property LastModify = new Property(5, long.class, "lastModify", false, "LAST_MODIFY");
        public final static Property CreateTime = new Property(6, long.class, "createTime", false, "CREATE_TIME");
        public final static Property FileName = new Property(7, String.class, "fileName", false, "FILE_NAME");
        public final static Property CurrentLength = new Property(8, long.class, "currentLength", false, "CURRENT_LENGTH");
        public final static Property Percentage = new Property(9, float.class, "percentage", false, "PERCENTAGE");
        public final static Property Date = new Property(10, long.class, "date", false, "DATE");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
        public final static Property IsVideo = new Property(12, boolean.class, "isVideo", false, "IS_VIDEO");
        public final static Property LastFinishPath = new Property(13, String.class, "lastFinishPath", false, "LAST_FINISH_PATH");
        public final static Property DownEntrance = new Property(14, int.class, "downEntrance", false, "DOWN_ENTRANCE");
        public final static Property WebViewUrl = new Property(15, String.class, "webViewUrl", false, "WEB_VIEW_URL");
    }


    public DownFilmDao(DaoConfig config) {
        super(config);
    }
    
    public DownFilmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_FILM\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: url
                "\"PATH\" TEXT," + // 1: path
                "\"FILE_TYPE\" TEXT," + // 2: fileType
                "\"DISPLAY_NAME\" TEXT," + // 3: displayName
                "\"TOTAL_LENGTH\" INTEGER NOT NULL ," + // 4: totalLength
                "\"LAST_MODIFY\" INTEGER NOT NULL ," + // 5: lastModify
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 6: createTime
                "\"FILE_NAME\" TEXT," + // 7: fileName
                "\"CURRENT_LENGTH\" INTEGER NOT NULL ," + // 8: currentLength
                "\"PERCENTAGE\" REAL NOT NULL ," + // 9: percentage
                "\"DATE\" INTEGER NOT NULL ," + // 10: date
                "\"STATUS\" INTEGER NOT NULL ," + // 11: status
                "\"IS_VIDEO\" INTEGER NOT NULL ," + // 12: isVideo
                "\"LAST_FINISH_PATH\" TEXT," + // 13: lastFinishPath
                "\"DOWN_ENTRANCE\" INTEGER NOT NULL ," + // 14: downEntrance
                "\"WEB_VIEW_URL\" TEXT);"); // 15: webViewUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_FILM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownFilm entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUrl());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
        stmt.bindLong(5, entity.getTotalLength());
        stmt.bindLong(6, entity.getLastModify());
        stmt.bindLong(7, entity.getCreateTime());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(8, fileName);
        }
        stmt.bindLong(9, entity.getCurrentLength());
        stmt.bindDouble(10, entity.getPercentage());
        stmt.bindLong(11, entity.getDate());
        stmt.bindLong(12, entity.getStatus());
        stmt.bindLong(13, entity.getIsVideo() ? 1L: 0L);
 
        String lastFinishPath = entity.getLastFinishPath();
        if (lastFinishPath != null) {
            stmt.bindString(14, lastFinishPath);
        }
        stmt.bindLong(15, entity.getDownEntrance());
 
        String webViewUrl = entity.getWebViewUrl();
        if (webViewUrl != null) {
            stmt.bindString(16, webViewUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownFilm entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUrl());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
        stmt.bindLong(5, entity.getTotalLength());
        stmt.bindLong(6, entity.getLastModify());
        stmt.bindLong(7, entity.getCreateTime());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(8, fileName);
        }
        stmt.bindLong(9, entity.getCurrentLength());
        stmt.bindDouble(10, entity.getPercentage());
        stmt.bindLong(11, entity.getDate());
        stmt.bindLong(12, entity.getStatus());
        stmt.bindLong(13, entity.getIsVideo() ? 1L: 0L);
 
        String lastFinishPath = entity.getLastFinishPath();
        if (lastFinishPath != null) {
            stmt.bindString(14, lastFinishPath);
        }
        stmt.bindLong(15, entity.getDownEntrance());
 
        String webViewUrl = entity.getWebViewUrl();
        if (webViewUrl != null) {
            stmt.bindString(16, webViewUrl);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public DownFilm readEntity(Cursor cursor, int offset) {
        DownFilm entity = new DownFilm( //
            cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // displayName
            cursor.getLong(offset + 4), // totalLength
            cursor.getLong(offset + 5), // lastModify
            cursor.getLong(offset + 6), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileName
            cursor.getLong(offset + 8), // currentLength
            cursor.getFloat(offset + 9), // percentage
            cursor.getLong(offset + 10), // date
            cursor.getInt(offset + 11), // status
            cursor.getShort(offset + 12) != 0, // isVideo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lastFinishPath
            cursor.getInt(offset + 14), // downEntrance
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // webViewUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownFilm entity, int offset) {
        entity.setUrl(cursor.getString(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisplayName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalLength(cursor.getLong(offset + 4));
        entity.setLastModify(cursor.getLong(offset + 5));
        entity.setCreateTime(cursor.getLong(offset + 6));
        entity.setFileName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCurrentLength(cursor.getLong(offset + 8));
        entity.setPercentage(cursor.getFloat(offset + 9));
        entity.setDate(cursor.getLong(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
        entity.setIsVideo(cursor.getShort(offset + 12) != 0);
        entity.setLastFinishPath(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDownEntrance(cursor.getInt(offset + 14));
        entity.setWebViewUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DownFilm entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(DownFilm entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownFilm entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
