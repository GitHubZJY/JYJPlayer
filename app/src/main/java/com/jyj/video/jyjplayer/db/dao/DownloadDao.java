package com.jyj.video.jyjplayer.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.jyj.video.jyjplayer.db.bean.Download;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DOWNLOAD".
*/
public class DownloadDao extends AbstractDao<Download, String> {

    public static final String TABLENAME = "DOWNLOAD";

    /**
     * Properties of entity Download.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property OriginalUrl = new Property(1, String.class, "originalUrl", false, "ORIGINAL_URL");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property FileType = new Property(3, String.class, "fileType", false, "FILE_TYPE");
        public final static Property DisplayName = new Property(4, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property TotalLength = new Property(5, long.class, "totalLength", false, "TOTAL_LENGTH");
        public final static Property LastModify = new Property(6, long.class, "lastModify", false, "LAST_MODIFY");
        public final static Property CreateTime = new Property(7, long.class, "createTime", false, "CREATE_TIME");
        public final static Property FileName = new Property(8, String.class, "fileName", false, "FILE_NAME");
        public final static Property CurrentLength = new Property(9, long.class, "currentLength", false, "CURRENT_LENGTH");
        public final static Property Percentage = new Property(10, float.class, "percentage", false, "PERCENTAGE");
        public final static Property Date = new Property(11, long.class, "date", false, "DATE");
        public final static Property Status = new Property(12, int.class, "status", false, "STATUS");
        public final static Property Type = new Property(13, int.class, "type", false, "TYPE");
        public final static Property Sidecars = new Property(14, String.class, "sidecars", false, "SIDECARS");
        public final static Property IsVideo = new Property(15, boolean.class, "isVideo", false, "IS_VIDEO");
        public final static Property LastFinishPath = new Property(16, String.class, "lastFinishPath", false, "LAST_FINISH_PATH");
        public final static Property Completeness = new Property(17, String.class, "completeness", false, "COMPLETENESS");
    }


    public DownloadDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: url
                "\"ORIGINAL_URL\" TEXT," + // 1: originalUrl
                "\"PATH\" TEXT," + // 2: path
                "\"FILE_TYPE\" TEXT," + // 3: fileType
                "\"DISPLAY_NAME\" TEXT," + // 4: displayName
                "\"TOTAL_LENGTH\" INTEGER NOT NULL ," + // 5: totalLength
                "\"LAST_MODIFY\" INTEGER NOT NULL ," + // 6: lastModify
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 7: createTime
                "\"FILE_NAME\" TEXT," + // 8: fileName
                "\"CURRENT_LENGTH\" INTEGER NOT NULL ," + // 9: currentLength
                "\"PERCENTAGE\" REAL NOT NULL ," + // 10: percentage
                "\"DATE\" INTEGER NOT NULL ," + // 11: date
                "\"STATUS\" INTEGER NOT NULL ," + // 12: status
                "\"TYPE\" INTEGER NOT NULL ," + // 13: type
                "\"SIDECARS\" TEXT," + // 14: sidecars
                "\"IS_VIDEO\" INTEGER NOT NULL ," + // 15: isVideo
                "\"LAST_FINISH_PATH\" TEXT," + // 16: lastFinishPath
                "\"COMPLETENESS\" TEXT);"); // 17: completeness
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Download entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUrl());
 
        String originalUrl = entity.getOriginalUrl();
        if (originalUrl != null) {
            stmt.bindString(2, originalUrl);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(4, fileType);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
        stmt.bindLong(6, entity.getTotalLength());
        stmt.bindLong(7, entity.getLastModify());
        stmt.bindLong(8, entity.getCreateTime());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(9, fileName);
        }
        stmt.bindLong(10, entity.getCurrentLength());
        stmt.bindDouble(11, entity.getPercentage());
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getStatus());
        stmt.bindLong(14, entity.getType());
 
        String sidecars = entity.getSidecars();
        if (sidecars != null) {
            stmt.bindString(15, sidecars);
        }
        stmt.bindLong(16, entity.getIsVideo() ? 1L: 0L);
 
        String lastFinishPath = entity.getLastFinishPath();
        if (lastFinishPath != null) {
            stmt.bindString(17, lastFinishPath);
        }
 
        String completeness = entity.getCompleteness();
        if (completeness != null) {
            stmt.bindString(18, completeness);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Download entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUrl());
 
        String originalUrl = entity.getOriginalUrl();
        if (originalUrl != null) {
            stmt.bindString(2, originalUrl);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(4, fileType);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
        stmt.bindLong(6, entity.getTotalLength());
        stmt.bindLong(7, entity.getLastModify());
        stmt.bindLong(8, entity.getCreateTime());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(9, fileName);
        }
        stmt.bindLong(10, entity.getCurrentLength());
        stmt.bindDouble(11, entity.getPercentage());
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getStatus());
        stmt.bindLong(14, entity.getType());
 
        String sidecars = entity.getSidecars();
        if (sidecars != null) {
            stmt.bindString(15, sidecars);
        }
        stmt.bindLong(16, entity.getIsVideo() ? 1L: 0L);
 
        String lastFinishPath = entity.getLastFinishPath();
        if (lastFinishPath != null) {
            stmt.bindString(17, lastFinishPath);
        }
 
        String completeness = entity.getCompleteness();
        if (completeness != null) {
            stmt.bindString(18, completeness);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Download readEntity(Cursor cursor, int offset) {
        Download entity = new Download( //
            cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // originalUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // displayName
            cursor.getLong(offset + 5), // totalLength
            cursor.getLong(offset + 6), // lastModify
            cursor.getLong(offset + 7), // createTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileName
            cursor.getLong(offset + 9), // currentLength
            cursor.getFloat(offset + 10), // percentage
            cursor.getLong(offset + 11), // date
            cursor.getInt(offset + 12), // status
            cursor.getInt(offset + 13), // type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sidecars
            cursor.getShort(offset + 15) != 0, // isVideo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // lastFinishPath
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // completeness
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Download entity, int offset) {
        entity.setUrl(cursor.getString(offset + 0));
        entity.setOriginalUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDisplayName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalLength(cursor.getLong(offset + 5));
        entity.setLastModify(cursor.getLong(offset + 6));
        entity.setCreateTime(cursor.getLong(offset + 7));
        entity.setFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCurrentLength(cursor.getLong(offset + 9));
        entity.setPercentage(cursor.getFloat(offset + 10));
        entity.setDate(cursor.getLong(offset + 11));
        entity.setStatus(cursor.getInt(offset + 12));
        entity.setType(cursor.getInt(offset + 13));
        entity.setSidecars(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsVideo(cursor.getShort(offset + 15) != 0);
        entity.setLastFinishPath(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCompleteness(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Download entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(Download entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Download entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
