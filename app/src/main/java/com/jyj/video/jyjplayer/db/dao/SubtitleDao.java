package com.jyj.video.jyjplayer.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.jyj.video.jyjplayer.db.bean.Subtitle;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SUBTITLE".
*/
public class SubtitleDao extends AbstractDao<Subtitle, String> {

    public static final String TABLENAME = "SUBTITLE";

    /**
     * Properties of entity Subtitle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VideoPath = new Property(0, String.class, "videoPath", true, "VIDEO_PATH");
        public final static Property CurSubtitle = new Property(1, String.class, "curSubtitle", false, "CUR_SUBTITLE");
        public final static Property AllSubtitles = new Property(2, String.class, "allSubtitles", false, "ALL_SUBTITLES");
    }


    public SubtitleDao(DaoConfig config) {
        super(config);
    }
    
    public SubtitleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBTITLE\" (" + //
                "\"VIDEO_PATH\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: videoPath
                "\"CUR_SUBTITLE\" TEXT," + // 1: curSubtitle
                "\"ALL_SUBTITLES\" TEXT);"); // 2: allSubtitles
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBTITLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Subtitle entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getVideoPath());
 
        String curSubtitle = entity.getCurSubtitle();
        if (curSubtitle != null) {
            stmt.bindString(2, curSubtitle);
        }
 
        String allSubtitles = entity.getAllSubtitles();
        if (allSubtitles != null) {
            stmt.bindString(3, allSubtitles);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Subtitle entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getVideoPath());
 
        String curSubtitle = entity.getCurSubtitle();
        if (curSubtitle != null) {
            stmt.bindString(2, curSubtitle);
        }
 
        String allSubtitles = entity.getAllSubtitles();
        if (allSubtitles != null) {
            stmt.bindString(3, allSubtitles);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Subtitle readEntity(Cursor cursor, int offset) {
        Subtitle entity = new Subtitle( //
            cursor.getString(offset + 0), // videoPath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // curSubtitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // allSubtitles
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Subtitle entity, int offset) {
        entity.setVideoPath(cursor.getString(offset + 0));
        entity.setCurSubtitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAllSubtitles(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Subtitle entity, long rowId) {
        return entity.getVideoPath();
    }
    
    @Override
    public String getKey(Subtitle entity) {
        if(entity != null) {
            return entity.getVideoPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Subtitle entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
