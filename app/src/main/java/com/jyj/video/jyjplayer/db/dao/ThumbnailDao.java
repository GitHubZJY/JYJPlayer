package com.jyj.video.jyjplayer.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.jyj.video.jyjplayer.db.bean.Thumbnail;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "THUMBNAIL".
*/
public class ThumbnailDao extends AbstractDao<Thumbnail, String> {

    public static final String TABLENAME = "THUMBNAIL";

    /**
     * Properties of entity Thumbnail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Path = new Property(0, String.class, "path", true, "PATH");
        public final static Property Thumbnail = new Property(1, byte[].class, "thumbnail", false, "THUMBNAIL");
    }


    public ThumbnailDao(DaoConfig config) {
        super(config);
    }
    
    public ThumbnailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THUMBNAIL\" (" + //
                "\"PATH\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: path
                "\"THUMBNAIL\" BLOB);"); // 1: thumbnail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THUMBNAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Thumbnail entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPath());
 
        byte[] thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindBlob(2, thumbnail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Thumbnail entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPath());
 
        byte[] thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindBlob(2, thumbnail);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Thumbnail readEntity(Cursor cursor, int offset) {
        Thumbnail entity = new Thumbnail( //
            cursor.getString(offset + 0), // path
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1) // thumbnail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Thumbnail entity, int offset) {
        entity.setPath(cursor.getString(offset + 0));
        entity.setThumbnail(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Thumbnail entity, long rowId) {
        return entity.getPath();
    }
    
    @Override
    public String getKey(Thumbnail entity) {
        if(entity != null) {
            return entity.getPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Thumbnail entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
